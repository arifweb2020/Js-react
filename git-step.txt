1> for version check = git --version

2> for help = git help

3> move to drive = cd D:

4> check content of drive d = dir

5> to make folder in D drive = mkdir ArifTest

6> inter in ArifTest Folder = cd ArifTest

----------- GIT START --------------------

for git configuration globally = git config --global user.name "arif"

for git configuration locally = git config  user.name "ariflocal"

for git configuration globally = git config --global user.email "arif@gmail.com"

for git configuration locally = git config  user.email "ariflocal@gmail.com"

7> to check file or git is initialized or not in that folder = git status

8> for initiliaze git in that folder = git init

9> for add any file ex - index.html in TEST folder = touch index.html

10> for add file in git = git add filename ex- git add index.html

11> for add or update multiple files = git add .

12> every time u cahanged in file u must = git add. 

13> for commit = git commit -m 'first commit index.html file'

14> for track your work = git log

15> to check our project is connected or not in github = git remote

--------- to put project on github ------

16> to add project on github = git remote add origin https://github.com/arifweb2020/TEST21.git

17> to push yr projrct = git push -u origin master

18> if u want to change some thing locally 

reset git init = rm -rf .git/

steps are :-

git add .

git commit -m 'my second commit in index.html'

git push -u origin master

19> to check branch = git branch

20> to check content in file = cat index.html


21> to create local branch = git branch local or git checkout -b local

22> to copy master file all in local = git checkout local

then git add .

	git commit -m 'i removed the line'
	
	git push -u origin local
	
23> to go back on master branch = git checkout master 

24> to merge local code to master = git merge local


if u are in = git checkout develop 

and u want to merge your-repo with develop = git merge your-repo

or 

if u are in = git checkout your-repo

and u want to merge develop with your-repo = git merge develop
git checkout -b part3

git push orign part-3

"Remote origin already exists" error
git remote set-url origin https://github.com/your/repository



GIT STASH

git stash save "added h2"

git stash list - to check list
stash@{0}:on master added

git stash apply stash@ -> to retrive data

git stash list

git stash drop stash@ -> to delete stash

git stash clean -> to delete multiple stash


git stash -p -> to stash one file in multiple file


DELETE Branch

git branch -d <branch_name> - local

$ git push <remote_name> --delete <branch_name> - remote


by mistake u want to commit on master branch but u commit any other branch
git checkout master
git cherry-pick (commit num 32222213213)


GIT CONFLICT

if u pull origin master to yr branch

ex- u are in yr branch

git pull origin master

it will show
 * branch            master     -> FETCH_HEAD
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

git add .

git commit

pop up will open

esc key + shift or :

git push origin yr branch_name



error: failed to push some refs to 'https://github.com/arifweb2020/con-test.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.


git pull [remote] [branch]


Never force anything, especially if you don't know what you are doing. That said, the right thing for you to do was to pull their work with git pull [remote] [branch], fix any merge conflicts, commit and push your code. Now, that you have force pushed your code and your friend's commit does not exist on the remote, your friend has to do the exact same thing

git pull [remote] [branch]
Fix merge conflicts. Git would warn you if there are any
Commit if there were any merge conflicts with git commit
git push [remote] [branch]
Then you can do a git pull [remote] [branch] and everything would be in sync.
